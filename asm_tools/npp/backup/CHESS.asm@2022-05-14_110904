.386
.model flat, stdcall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;includem biblioteci, si declaram ce functii vrem sa importam
includelib msvcrt.lib
extern exit: proc
extern malloc: proc
extern memset: proc
extern printf: proc

includelib canvas.lib
extern BeginDrawing: proc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;declaram simbolul start ca public - de acolo incepe executia
public start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;sectiunile programului, date, respectiv cod
.data
;aici declaram date
format DB "%d %d", 0
window_title DB "CHESS",0
area_width EQU 400
area_height EQU 400
area DD 0

counter DD 0 ; numara evenimentele de tip timer

arg1 EQU 8
arg2 EQU 12
arg3 EQU 16
arg4 EQU 20

symbol_width EQU 10
symbol_height EQU 20

xx dd 0
yy dd 0

square equ 40

p_piese DB 8, 10, 9, 11, 12, 9, 10, 8
		DB 7, 7, 7, 7, 7, 7, 7, 7
		DB 0, 0, 0, 0, 0, 0, 0, 0
		DB 0, 0, 0, 0, 0, 0, 0, 0
		DB 0, 0, 0, 0, 0, 0, 0, 0
		DB 0, 0, 0, 0, 0, 0, 0, 0
		DB 1, 1, 1, 1, 1, 1, 1, 1
		DB 2, 4, 3, 5, 6, 3, 4, 2
		

include digits.inc
include letters.inc
include picture.inc
include colors.inc
include BlackPieces.inc


.code
; procedura make_text afiseaza o litera sau o cifra la coordonatele date
; arg1 - simbolul de afisat (litera sau cifra)
; arg2 - pointer la vectorul de pixeli
; arg3 - pos_x
; arg4 - pos_y
make_text proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0FFFFFFh
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text endp

; un macro ca sa apelam mai usor desenarea simbolului
make_text_macro macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text
	add esp, 16
endm

make_black_pieces proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	shl eax, 2
	lea esi, BlackPieces

draw_bpiece:
	mov ebx, square
	mul ebx
	mov ebx, square
	mul ebx
	add esi, eax
	mov ecx, square
bucla_bpiece_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, square
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, square
bucla_bpiece_coloane:
	push eax
	mov eax, [esi]
	cmp eax, 0EEEEEEh
	jg next
	mov dword ptr [edi], eax
	next:
	pop eax
	
	add esi, 4
	add edi, 4
	loop bucla_bpiece_coloane
	pop ecx
	loop bucla_bpiece_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_black_pieces endp

make_bpiece_macro macro piece, drawArea, x, y
	push y
	push x
	push drawArea
	push piece
	call make_black_pieces
	add esp, 16
endm

make_white_pieces proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	shl eax, 2
	lea esi, BlackPieces

draw_wpiece:
	mov ebx, square
	mul ebx
	mov ebx, square
	mul ebx
	add esi, eax
	mov ecx, square
bucla_wpiece_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, square
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, square
bucla_wpiece_coloane:
	push eax
	mov eax, [esi]
	cmp eax, 0EEEEEEh
	jg next
	mov dword ptr [edi], 0FAFAFAh 
	next:
	pop eax
	
	add esi, 4
	add edi, 4
	loop bucla_wpiece_coloane
	pop ecx
	loop bucla_wpiece_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_white_pieces endp

make_wpiece_macro macro piece, drawArea, x, y
	push y
	push x
	push drawArea
	push piece
	call make_white_pieces
	add esp, 16
endm

color proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat 
	shl eax, 2
	lea esi, colors
	
draw_color:
	mov ebx, square
	mul ebx
	mov ebx, square
	mul ebx
	add esi, eax
	mov ecx, square
bucla_color_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, square
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, square
bucla_color_coloane:
	push eax
	mov eax, [esi]
	mov dword ptr [edi], eax
	pop eax
	
	add esi, 4
	add edi, 4
	loop bucla_color_coloane
	pop ecx
	loop bucla_color_linii
	popa
	mov esp, ebp
	pop ebp
	ret
color endp

make_color_macro macro color_number, drawArea, x, y
	push y
	push x
	push drawArea
	push color_number
	call color
	add esp, 16
endm

create_board macro n
local linie, coloana, inchis, deschis
pusha
xor esi, esi

linie:

xor edi, edi

coloana:
;;creez tabla de dimensiune 8x8
;calculez coordonatele
xor ecx, ecx
mov eax, edi
mov ecx, square
mul ecx
mov ebx, eax
mov eax, esi
mul ecx

xor ecx, ecx
add ecx, esi
add ecx, edi
shr ecx, 1
jc deschis
make_color_macro 0, area, eax, ebx
jmp inchis

deschis:
make_color_macro 1, area, eax, ebx

inchis:

inc edi
cmp edi, n
jle coloana

inc esi
cmp esi, n
jle linie
popa
endm

populate_board macro m
;black pawns
make_bpiece_macro 0, area, 0, 240
make_bpiece_macro 0, area, 40, 240
make_bpiece_macro 0, area, 80, 240
make_bpiece_macro 0, area, 120, 240
make_bpiece_macro 0, area, 160, 240
make_bpiece_macro 0, area, 200, 240
make_bpiece_macro 0, area, 240, 240
make_bpiece_macro 0, area, 280, 240

;black rooks
make_bpiece_macro 1, area, 0, 280
make_bpiece_macro 1, area, 280, 280

;black knights
make_bpiece_macro 3, area, 40, 280
make_bpiece_macro 3, area, 240, 280

;black bishops
make_bpiece_macro 2, area, 80, 280
make_bpiece_macro 2, area, 200, 280

;black queen(4) and king(5)
make_bpiece_macro 4, area, 120, 280
make_bpiece_macro 5, area, 160, 280

;white pawns
make_wpiece_macro 0, area, 0, 40
make_wpiece_macro 0, area, 40, 40
make_wpiece_macro 0, area, 80, 40
make_wpiece_macro 0, area, 120, 40
make_wpiece_macro 0, area, 160, 40
make_wpiece_macro 0, area, 200, 40
make_wpiece_macro 0, area, 240, 40
make_wpiece_macro 0, area, 280, 40

;white rooks
make_wpiece_macro 1, area, 0, 0
make_wpiece_macro 1, area, 280, 0

;white knights
make_wpiece_macro 3, area, 40, 0
make_wpiece_macro 3, area, 240, 0

;white bishops
make_wpiece_macro 2, area, 80, 0
make_wpiece_macro 2, area, 200, 0

;white queen(4) and king(5)
make_wpiece_macro 4, area, 120, 0
make_wpiece_macro 5, area, 160, 0
endm

; functia de desenare - se apeleaza la fiecare click
; sau la fiecare interval de 200ms in care nu s-a dat click
; arg1 - evt (0 - initializare, 1 - click, 2 - s-a scurs intervalul fara click, 3 - s-a apasat o tasta)
; arg2 - x (in cazul apasarii unei taste, x contine codul ascii al tastei care a fost apasata)
; arg3 - y
draw proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1]
	cmp eax, 1
	jz evt_click
	cmp eax, 2
	jz evt_timer ; nu s-a efectuat click pe nimic
	;mai jos e codul care intializeaza fereastra cu pixeli albi
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	push 255
	push area
	call memset
	add esp, 12
	;;generam tabla initiala
	create_board 7
	populate_board 7
	jmp afisare_litere
	
evt_click:
	; xor edx, edx
	; mov ebx, square
	; mov eax, [ebp+arg2]
	; div ebx
	; mov esi, eax        ;;am aflat coordonata x a piesei alese
	
	; xor edx, edx
	; mov eax, [ebp+arg3]
	; div ebx
	; mov edi, eax        ;;am aflat coordonata y a piesei alese
	
	; cmp p_piese[esi*8+edi], 1   ;;black pawn
	; jne afisare_litere
	; xor edx, edx
	; mov eax, esi
	; mul ebx
	; mov xx, eax
	
	; xor edx, edx
	; mov eax, edi
	; mul ebx
	; mov yy, eax
;	
;	push yy
;	push xx
;	push offset format
;	call printf
;	add esp, 12
	
	
;	make_color_macro 2, area, xx, yy
	
	jmp afisare_litere
	
evt_timer:
	inc counter
	
afisare_litere:
	;afisam valoarea counter-ului curent (sute, zeci si unitati)
	mov ebx, 10
	mov eax, counter
	;cifra unitatilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 390, 10
	;cifra zecilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 380, 10
	;cifra sutelor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 370, 10
	

final_draw:
	popa
	mov esp, ebp
	pop ebp
	ret
draw endp

start:
	;alocam memorie pentru zona de desenat
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	call malloc
	add esp, 4
	mov area, eax
	;apelam functia de desenare a ferestrei
	; typedef void (*DrawFunc)(int evt, int x, int y);
	; void __cdecl BeginDrawing(const char *title, int width, int height, unsigned int *area, DrawFunc draw);
	push offset draw
	push area
	push area_height
	push area_width
	push offset window_title
	call BeginDrawing
	add esp, 20
	
	;terminarea programului
	push 0
	call exit
end start
